// <auto-generated />
using System;
using Jardineria_Gabriel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jardineria_Gabriel.Migrations.Users
{
    [DbContext(typeof(GabrielContext))]
    [Migration("20241201182512_InitialUsers")]
    partial class InitialUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jardineria_Gabriel.Models.JardinUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasMaxLength(9)
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "674959d8-9062-4fdf-8138-0e2d4935083c",
                            AccessFailedCount = 0,
                            Address = "BasicHome",
                            ConcurrencyStamp = "ed8becb9-1e3f-4ff6-bfa5-0e19ac581a09",
                            Email = "basic@jardin.com",
                            EmailConfirmed = true,
                            FullName = "BasicoJardineria",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASIC@JARDIN.COM",
                            NormalizedUserName = "BASIC@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHlSgto814BIAuYuhq3LWFdfuZCyXEVQ2175HMBwNwZhYd7ZjR5N2aiRyEKqBG685w==",
                            Phone = 123456789,
                            PhoneNumberConfirmed = false,
                            PostalCode = 12345,
                            SecurityStamp = "3582a536-9ea8-4e00-bcf3-7bd327c2f681",
                            TwoFactorEnabled = false,
                            UserName = "basic@jardin.com"
                        },
                        new
                        {
                            Id = "74de0acc-d513-4f83-a4ca-00808567b8bf",
                            AccessFailedCount = 0,
                            Address = "PremiumHome",
                            ConcurrencyStamp = "2138166f-bd79-4180-8794-558e1e915a70",
                            Email = "premium@jardin.com",
                            EmailConfirmed = true,
                            FullName = "PremiumJardineria",
                            LockoutEnabled = false,
                            NormalizedEmail = "PREMIUM@JARDIN.COM",
                            NormalizedUserName = "PREMIUM@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECYShtzAImHLEWA907rPqanlOXqUvxVDId6kIY7fW/0l8dFeULW4WuDTqgSNn2sB6Q==",
                            Phone = 123456789,
                            PhoneNumberConfirmed = false,
                            PostalCode = 12345,
                            SecurityStamp = "a9dba1b2-b02b-43d4-9dea-010d8bd6b2e4",
                            TwoFactorEnabled = false,
                            UserName = "premium@jardin.com"
                        },
                        new
                        {
                            Id = "da0339c6-454e-4738-a8d7-7d03f98a48ab",
                            AccessFailedCount = 0,
                            Address = "AdminHome",
                            ConcurrencyStamp = "106d9d48-8b15-4730-b13c-035c22d2bdbe",
                            Email = "admin@jardin.com",
                            EmailConfirmed = true,
                            FullName = "AdminJardineria",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@JARDIN.COM",
                            NormalizedUserName = "ADMIN@JARDIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELGCAI71F/RqwghcNQg0rs1IMhb/BggabjJSknliQjeRHriNN9MGgGOCWzE+IjoMBA==",
                            Phone = 123456789,
                            PhoneNumberConfirmed = false,
                            PostalCode = 12345,
                            SecurityStamp = "5c9de535-ec32-479e-b693-3a694ce1ce18",
                            TwoFactorEnabled = false,
                            UserName = "admin@jardin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1b8b52a5-7682-43e4-86f6-097851976102",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "9b05e372-4d1e-47ca-ae2c-38c343aa4874",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "7342e5c4-02a5-4333-8f36-4af2fe325c57",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "674959d8-9062-4fdf-8138-0e2d4935083c",
                            RoleId = "1b8b52a5-7682-43e4-86f6-097851976102"
                        },
                        new
                        {
                            UserId = "74de0acc-d513-4f83-a4ca-00808567b8bf",
                            RoleId = "9b05e372-4d1e-47ca-ae2c-38c343aa4874"
                        },
                        new
                        {
                            UserId = "da0339c6-454e-4738-a8d7-7d03f98a48ab",
                            RoleId = "7342e5c4-02a5-4333-8f36-4af2fe325c57"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Jardineria_Gabriel.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Jardineria_Gabriel.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jardineria_Gabriel.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Jardineria_Gabriel.Models.JardinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
